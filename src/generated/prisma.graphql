type AggregateJob {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

enum ClassificationEnum {
  UNDEFINED
  EC01
  EC02
  EC03
  EC04
}

scalar DateTime

enum DepartmentEnum {
  TBS
  DND
  PSPC
  OCHRO
}

type Job {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: User!
  name: String!
  viewedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  department: DepartmentEnum
  classification: ClassificationEnum
  location: LocationEnum
}

type JobConnection {
  pageInfo: PageInfo!
  edges: [JobEdge]!
  aggregate: AggregateJob!
}

input JobCreateInput {
  owner: UserCreateOneWithoutJobPostingsInput!
  name: String!
  viewedBy: UserCreateManyWithoutViewedInput
  department: DepartmentEnum
  classification: ClassificationEnum
  location: LocationEnum
}

input JobCreateManyWithoutOwnerInput {
  create: [JobCreateWithoutOwnerInput!]
  connect: [JobWhereUniqueInput!]
}

input JobCreateManyWithoutViewedByInput {
  create: [JobCreateWithoutViewedByInput!]
  connect: [JobWhereUniqueInput!]
}

input JobCreateWithoutOwnerInput {
  name: String!
  viewedBy: UserCreateManyWithoutViewedInput
  department: DepartmentEnum
  classification: ClassificationEnum
  location: LocationEnum
}

input JobCreateWithoutViewedByInput {
  owner: UserCreateOneWithoutJobPostingsInput!
  name: String!
  department: DepartmentEnum
  classification: ClassificationEnum
  location: LocationEnum
}

type JobEdge {
  node: Job!
  cursor: String!
}

enum JobOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  department_ASC
  department_DESC
  classification_ASC
  classification_DESC
  location_ASC
  location_DESC
}

type JobPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  department: DepartmentEnum
  classification: ClassificationEnum
  location: LocationEnum
}

input JobScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  department: DepartmentEnum
  department_not: DepartmentEnum
  department_in: [DepartmentEnum!]
  department_not_in: [DepartmentEnum!]
  classification: ClassificationEnum
  classification_not: ClassificationEnum
  classification_in: [ClassificationEnum!]
  classification_not_in: [ClassificationEnum!]
  location: LocationEnum
  location_not: LocationEnum
  location_in: [LocationEnum!]
  location_not_in: [LocationEnum!]
  AND: [JobScalarWhereInput!]
  OR: [JobScalarWhereInput!]
  NOT: [JobScalarWhereInput!]
}

type JobSubscriptionPayload {
  mutation: MutationType!
  node: Job
  updatedFields: [String!]
  previousValues: JobPreviousValues
}

input JobSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: JobWhereInput
  AND: [JobSubscriptionWhereInput!]
  OR: [JobSubscriptionWhereInput!]
  NOT: [JobSubscriptionWhereInput!]
}

input JobUpdateInput {
  owner: UserUpdateOneRequiredWithoutJobPostingsInput
  name: String
  viewedBy: UserUpdateManyWithoutViewedInput
  department: DepartmentEnum
  classification: ClassificationEnum
  location: LocationEnum
}

input JobUpdateManyDataInput {
  name: String
  department: DepartmentEnum
  classification: ClassificationEnum
  location: LocationEnum
}

input JobUpdateManyMutationInput {
  name: String
  department: DepartmentEnum
  classification: ClassificationEnum
  location: LocationEnum
}

input JobUpdateManyWithoutOwnerInput {
  create: [JobCreateWithoutOwnerInput!]
  delete: [JobWhereUniqueInput!]
  connect: [JobWhereUniqueInput!]
  set: [JobWhereUniqueInput!]
  disconnect: [JobWhereUniqueInput!]
  update: [JobUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [JobUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [JobScalarWhereInput!]
  updateMany: [JobUpdateManyWithWhereNestedInput!]
}

input JobUpdateManyWithoutViewedByInput {
  create: [JobCreateWithoutViewedByInput!]
  delete: [JobWhereUniqueInput!]
  connect: [JobWhereUniqueInput!]
  set: [JobWhereUniqueInput!]
  disconnect: [JobWhereUniqueInput!]
  update: [JobUpdateWithWhereUniqueWithoutViewedByInput!]
  upsert: [JobUpsertWithWhereUniqueWithoutViewedByInput!]
  deleteMany: [JobScalarWhereInput!]
  updateMany: [JobUpdateManyWithWhereNestedInput!]
}

input JobUpdateManyWithWhereNestedInput {
  where: JobScalarWhereInput!
  data: JobUpdateManyDataInput!
}

input JobUpdateWithoutOwnerDataInput {
  name: String
  viewedBy: UserUpdateManyWithoutViewedInput
  department: DepartmentEnum
  classification: ClassificationEnum
  location: LocationEnum
}

input JobUpdateWithoutViewedByDataInput {
  owner: UserUpdateOneRequiredWithoutJobPostingsInput
  name: String
  department: DepartmentEnum
  classification: ClassificationEnum
  location: LocationEnum
}

input JobUpdateWithWhereUniqueWithoutOwnerInput {
  where: JobWhereUniqueInput!
  data: JobUpdateWithoutOwnerDataInput!
}

input JobUpdateWithWhereUniqueWithoutViewedByInput {
  where: JobWhereUniqueInput!
  data: JobUpdateWithoutViewedByDataInput!
}

input JobUpsertWithWhereUniqueWithoutOwnerInput {
  where: JobWhereUniqueInput!
  update: JobUpdateWithoutOwnerDataInput!
  create: JobCreateWithoutOwnerInput!
}

input JobUpsertWithWhereUniqueWithoutViewedByInput {
  where: JobWhereUniqueInput!
  update: JobUpdateWithoutViewedByDataInput!
  create: JobCreateWithoutViewedByInput!
}

input JobWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  owner: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  viewedBy_every: UserWhereInput
  viewedBy_some: UserWhereInput
  viewedBy_none: UserWhereInput
  department: DepartmentEnum
  department_not: DepartmentEnum
  department_in: [DepartmentEnum!]
  department_not_in: [DepartmentEnum!]
  classification: ClassificationEnum
  classification_not: ClassificationEnum
  classification_in: [ClassificationEnum!]
  classification_not_in: [ClassificationEnum!]
  location: LocationEnum
  location_not: LocationEnum
  location_in: [LocationEnum!]
  location_not_in: [LocationEnum!]
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
}

input JobWhereUniqueInput {
  id: ID
  name: String
}

enum LocationEnum {
  NCR
  ONTARIO
  QUEBEC
  OTHER
}

scalar Long

type Mutation {
  createJob(data: JobCreateInput!): Job!
  updateJob(data: JobUpdateInput!, where: JobWhereUniqueInput!): Job
  updateManyJobs(data: JobUpdateManyMutationInput!, where: JobWhereInput): BatchPayload!
  upsertJob(where: JobWhereUniqueInput!, create: JobCreateInput!, update: JobUpdateInput!): Job!
  deleteJob(where: JobWhereUniqueInput!): Job
  deleteManyJobs(where: JobWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  job(where: JobWhereUniqueInput!): Job
  jobs(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Job]!
  jobsConnection(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JobConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  job(where: JobSubscriptionWhereInput): JobSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  gcID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  onBoarded: Boolean!
  classification: ClassificationEnum!
  type: UserTypeEnum!
  name: String!
  jobPostings(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Job!]
  viewed(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Job!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  gcID: ID!
  onBoarded: Boolean!
  classification: ClassificationEnum!
  type: UserTypeEnum!
  name: String!
  jobPostings: JobCreateManyWithoutOwnerInput
  viewed: JobCreateManyWithoutViewedByInput
}

input UserCreateManyWithoutViewedInput {
  create: [UserCreateWithoutViewedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutJobPostingsInput {
  create: UserCreateWithoutJobPostingsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutJobPostingsInput {
  gcID: ID!
  onBoarded: Boolean!
  classification: ClassificationEnum!
  type: UserTypeEnum!
  name: String!
  viewed: JobCreateManyWithoutViewedByInput
}

input UserCreateWithoutViewedInput {
  gcID: ID!
  onBoarded: Boolean!
  classification: ClassificationEnum!
  type: UserTypeEnum!
  name: String!
  jobPostings: JobCreateManyWithoutOwnerInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  gcID_ASC
  gcID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  onBoarded_ASC
  onBoarded_DESC
  classification_ASC
  classification_DESC
  type_ASC
  type_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  gcID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  onBoarded: Boolean!
  classification: ClassificationEnum!
  type: UserTypeEnum!
  name: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  gcID: ID
  gcID_not: ID
  gcID_in: [ID!]
  gcID_not_in: [ID!]
  gcID_lt: ID
  gcID_lte: ID
  gcID_gt: ID
  gcID_gte: ID
  gcID_contains: ID
  gcID_not_contains: ID
  gcID_starts_with: ID
  gcID_not_starts_with: ID
  gcID_ends_with: ID
  gcID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  onBoarded: Boolean
  onBoarded_not: Boolean
  classification: ClassificationEnum
  classification_not: ClassificationEnum
  classification_in: [ClassificationEnum!]
  classification_not_in: [ClassificationEnum!]
  type: UserTypeEnum
  type_not: UserTypeEnum
  type_in: [UserTypeEnum!]
  type_not_in: [UserTypeEnum!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

enum UserTypeEnum {
  UNDEFINED
  SEEKER
  RECRUITER
}

input UserUpdateInput {
  gcID: ID
  onBoarded: Boolean
  classification: ClassificationEnum
  type: UserTypeEnum
  name: String
  jobPostings: JobUpdateManyWithoutOwnerInput
  viewed: JobUpdateManyWithoutViewedByInput
}

input UserUpdateManyDataInput {
  gcID: ID
  onBoarded: Boolean
  classification: ClassificationEnum
  type: UserTypeEnum
  name: String
}

input UserUpdateManyMutationInput {
  gcID: ID
  onBoarded: Boolean
  classification: ClassificationEnum
  type: UserTypeEnum
  name: String
}

input UserUpdateManyWithoutViewedInput {
  create: [UserCreateWithoutViewedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutViewedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutViewedInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutJobPostingsInput {
  create: UserCreateWithoutJobPostingsInput
  update: UserUpdateWithoutJobPostingsDataInput
  upsert: UserUpsertWithoutJobPostingsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutJobPostingsDataInput {
  gcID: ID
  onBoarded: Boolean
  classification: ClassificationEnum
  type: UserTypeEnum
  name: String
  viewed: JobUpdateManyWithoutViewedByInput
}

input UserUpdateWithoutViewedDataInput {
  gcID: ID
  onBoarded: Boolean
  classification: ClassificationEnum
  type: UserTypeEnum
  name: String
  jobPostings: JobUpdateManyWithoutOwnerInput
}

input UserUpdateWithWhereUniqueWithoutViewedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutViewedDataInput!
}

input UserUpsertWithoutJobPostingsInput {
  update: UserUpdateWithoutJobPostingsDataInput!
  create: UserCreateWithoutJobPostingsInput!
}

input UserUpsertWithWhereUniqueWithoutViewedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutViewedDataInput!
  create: UserCreateWithoutViewedInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  gcID: ID
  gcID_not: ID
  gcID_in: [ID!]
  gcID_not_in: [ID!]
  gcID_lt: ID
  gcID_lte: ID
  gcID_gt: ID
  gcID_gte: ID
  gcID_contains: ID
  gcID_not_contains: ID
  gcID_starts_with: ID
  gcID_not_starts_with: ID
  gcID_ends_with: ID
  gcID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  onBoarded: Boolean
  onBoarded_not: Boolean
  classification: ClassificationEnum
  classification_not: ClassificationEnum
  classification_in: [ClassificationEnum!]
  classification_not_in: [ClassificationEnum!]
  type: UserTypeEnum
  type_not: UserTypeEnum
  type_in: [UserTypeEnum!]
  type_not_in: [UserTypeEnum!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  jobPostings_every: JobWhereInput
  jobPostings_some: JobWhereInput
  jobPostings_none: JobWhereInput
  viewed_every: JobWhereInput
  viewed_some: JobWhereInput
  viewed_none: JobWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  gcID: ID
  name: String
}
